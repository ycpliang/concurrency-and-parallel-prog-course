Script started on Sat Nov 21 23:13:51 2015

compile
--------------
1%>ubuntu1204-002:~/cs343/a5/a5q1> u++ -O2 -multi -nodebug q1.cc -o noDefine
1%>ubuntu1204-002:~/cs343/a5/a5q1> u++ -O2 -multi -nodebug -DPAD q1.cc -o defined



Timing
------------------
1%>ubuntu1204-002:~/cs343/a5/a5q1> /usr/bin/time -f "\t%E real, \t%U user,\t%S sys" ./noDefine 400000000
0x62fc10 0x62fc08 0x62fc00 0x62fbf8 
500000000
500000000
	0:09.16 real, 	17.67 user,	0.03 sys
1%>ubuntu1204-002:~/cs343/a5/a5q1> /usr/bin/time -f "\t%E real, \t%U user,\t%S sys" ./defined 8000000000
0x62fcc0 0x62fc80 0x62fc40 0x62fc00 
3000000000
3000000000
	0:10.13 real, 	20.04 user,	0.06 sys



******************************************************************************************************
It is noticible that with PAD defined, the running time is a lot faster. I believe this is because 
when PAD is define, the memory is 64 byte aligned which means it will read 64 byte at a time instead
of a word(4 byte) at a time, which means the register will be only loaded with one variable at a time.
Since there are two tasks, there are going to be multiple context switches in which register value are
stored. Thus, a lot padding will make this process a lot faster. Also, the variable will be read in 
one go. 
******************************************************************************************************
  
*******************************************************************************************************
Since it is on the stack, the address gets smaller with each variable declared. When PAD is not define
the address count down with a seperation of 8 bytes which is the size of each variable.
However, when PAD is defined, the address decrements by 0X40 which is 64 bytes. Thus, extra padding is
added at the end of every global stack variable.
*******************************************************************************************************

*******************************************************************************************************
there is implicit cast when cout pointers, however there exist no conversion for volatile pointer
variable; thus, it uses implicit cast to bool. Therefore, if you wish to print the address, then you 
need to explicitly cast the variable.
*******************************************************************************************************


1%>ubuntu1204-002:~/cs343/a5/a5q1> exit
exit

Script done on Sat Nov 21 23:17:33 2015
